Building a Distributed RDBMS using Raft

dongxu
PingCAP

* Introduction

* Why another RDBMS?

What's wrong? What we need?

- Scalability
- ACID Transaction
- SQL Support
- Auto failover

* Why not NoSQL?

- No more workarounds, please
- No! SQL

* What is Raft? Why Raft?

- designed to be easy to understand
- equivalent to Paxos in *fault-tolerance* and performance
- includes a simple cluster *membership* change mechanism

Not like Paxos, Raft is a *Replicated* *State* *Machine*

* RSM vs Consensus Algorithm

Paxos (Consensus Algorithm)

- Agree on one *single* value in a distributed environment

Raft / Multi Paxos (RSM)

- Agree on the same *sequence* of values

Paxos is simpler than Replicated State Machine

* Replication Model

* Master / Slave

*Advantage*

- Easy to understand, easy to implement
- Low communication cost

*Disadvantage*

- SPOF, low reliability.
- Weak failover

Traditional RDBMS, e.g. MySQL, PostgreSQL ...

* Gossip

*Advantange*

- 

*Disadvantage*

- Eventual consistency, you would never know when all the nodes reach a consensus


* Quorum Model (Paxos, Raft)

Advantange

Disadvantage

* How It Works

* Leader Election (1/2)

Term

Vote

* Leader Election (2/2)

TBD

* Log Replication (1/3)

TBD

* Log Replication (2/3)

TBD

* Log Replication (3/3)

TBD

* Config Change

TBD

* RDBMS & Raft

* TiDB Architecture 

.image imgs/tidb_stack.png _ 800

* TiKV Architecture

.image imgs/tikv_stack.png _ 1000

* Multi Raft

TBD

* Region Split / Merge

TBD

* MVCC

TBD

* Transaction Manager

TBD

* GC

TBD

* Query

TBD

