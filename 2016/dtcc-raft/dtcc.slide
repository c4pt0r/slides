Building a Distributed RDBMS using Raft

dongxu
PingCAP

* Introduction

* Why another RDBMS?

What's wrong? What we need?

- Scalability
- ACID Transaction
- SQL Support
- Auto failover

* Why not NoSQL?

- No more workarounds, please
- No! SQL

* What is Raft? Why Raft?

- designed to be easy to understand
- equivalent to Paxos in *fault-tolerance* and performance
- includes a simple cluster *membership* change mechanism

Not like Paxos, Raft is a *Replicated* *State* *Machine*

* RSM vs Consensus Algorithm

Paxos (Consensus Algorithm)

- Agree on one *single* value in a distributed environment

Raft / Multi Paxos (RSM)

- Agree on the same *sequence* of values

Paxos is simpler than Replicated State Machine

* Replication Model

* 1-Master / N-Slave

Traditional RDBMS, e.g. MySQL, PostgreSQL ...

*Advantage*

- Easy to understand, easy to implement

*Disadvantage*

- SPOF, low reliability
- Failover / Recovery is a nightmare

And if you want a strong consistency guarantee, the latency will become unacceptable.

* Gossip

widely used for service / node discovery, or share configration over a large network.

*Advantange*

- Pure P2P model, easy to deploy

*Disadvantage*

- You would never know when all the nodes reach a consensus, orz...
- Implementation complexity

* Quorum Model (WRN, Paxos, Raft)

*Advantange*

- Auto failover
- Acceptable latency

*Disadvantage*

- Implementation complexity

* How It Works

* Leader election (1/3)

At any given time, each node is either:

- *Leader*: handles all client operations, log replication
- *Follower*: only respond to incoming RPCs
- *Candidate*: wait for votes, new leader candidate

At most 1 viable leader at a time!

* Leader election (2/3)

.image imgs/raft_fsm.png _ 1000

* Leader election (3/3)

- Term
- Vote split

* Log replication (1/3)

TBD

* Log replication (2/3)

TBD

* Log replication (3/3)

TBD

* Config change

TBD

* RDBMS & Raft

* Raft vs Multi Raft

*Raft* ( Etcd / Concil / ... )

- Single RSM

*Multi-Raft* ( CockroachDB / TiKV / ... )

- Muiltiple RSM

* TiDB Architecture 

.image imgs/tidb_stack.png _ 800

* TiKV Architecture

.image imgs/tikv_stack.png _ 1000

* Region split / merge

TBD

* Metadata manangment 

Placement Driver

Region lookup

* MVCC

TBD

* Transaction Manager

TBD

* GC Problem

TBD

* Query

TBD

